{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["QuoteBox","props","state","quotes","index","getNewQuote","bind","getInitialQuote","fetch","then","res","json","out","i","length","push","this","setTimeout","setState","Math","floor","random","quote","twitterIntent","id","style","display","flexDirection","gap","backgroundColor","color","width","height","padding","borderRadius","paddingLeft","paddingRight","flex","fontFamily","class","justifyContent","marginBottom","href","onClick","React","Component","$","document","ready","animate","opacity","click","App","className","Helmet","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4OAAe,I,mCCSTA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,CAAE,CAAC,MAAQ,8EAAoE,OAAS,gBAChGC,MAAO,GAET,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,gBAAkB,EAAKA,gBAAgBD,KAArB,gBAEvBE,MAAM,4IAA4IC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAACG,GAC9K,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAG,OAAWE,OAAQD,IACvC,EAAKX,MAAMC,OAAOY,KAAKH,EAAG,OAAWC,OAXxB,E,qDAenB,WACEG,KAAKT,oB,6BAEP,WAAmB,IAAD,OAChBU,YAAW,WACT,EAAKC,UAAS,SAAAhB,GAAK,MACjB,CAACE,MAAOe,KAAKC,MAAMD,KAAKE,SAAWnB,EAAMC,OAAOW,cAEjD,O,yBAEL,WAAe,IAAD,OACZG,YAAW,WACT,EAAKC,UAAS,SAAAhB,GAAK,MACjB,CAACE,MAAOe,KAAKC,MAAMD,KAAKE,SAAWnB,EAAMC,OAAOW,cAEjD,O,oBAEL,WACE,IAyBMQ,EAAQN,KAAKd,MAAMC,OAAOa,KAAKd,MAAME,OACrCmB,EAAgB,0CAAkDD,EAAK,MAAY,OAAUA,EAAK,OAAa,uDACrH,OAEE,sBAAKE,GAAG,YAAYC,MA7BA,CACpBC,QAAS,OACTC,cAAe,SACfC,IAAK,GACLC,gBAAiB,QACjBC,MAAO,QACPC,MAAO,MACPC,OAAQ,OACRC,QAAS,sBACTC,aAAc,GAoBd,UACE,sBAAKV,GAAG,QAAQC,MAnBD,CACjBU,YAAa,GACbC,aAAc,GACdC,KAAM,EACNC,WAAY,oBAeV,UACE,qBAAId,GAAG,OAAP,UAAc,8BAAK,mBAAGA,GAAG,YAAYe,MAAM,wBAA+BjB,EAAK,MAAU,8BAAK,mBAAGE,GAAG,YAAYe,MAAM,4BACtH,oBAAGf,GAAG,SAAN,eAAkBF,EAAK,aAEzB,sBAAKG,MAjBc,CACrBC,QAAS,OACTC,cAAe,MACfa,eAAgB,WAChBH,KAAM,EACNI,aAAc,IAYZ,UACE,mBAAGC,KAAMnB,EAAeC,GAAG,cAA3B,SACE,qBAAKe,MAAM,QAAX,SACE,mBAAGA,MAAM,uBAGb,qBAAKf,GAAG,YAAYmB,QAAS3B,KAAKX,YAAlC,SAA+C,mBAAGkC,MAAM,4B,GA1E3CK,IAAMC,WAkF7BC,IAAEC,UAAUC,OAAM,WAChB/B,YAAW,WACT6B,IAAE,KAAKG,QAAQ,CAACC,QAAS,KAAM,OAC9B,KAEHJ,IAAE,cAAcK,OAAM,WACpBL,IAAE,UAAUG,QAAQ,CAACC,QAAS,KAAM,KACpCJ,IAAE,UAAUG,QAAQ,CAACC,QAAS,KAAM,WAoBzBE,MAXf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,UACE,6DAEF,cAAC,EAAD,QCrGSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhD,MAAK,YAAkD,IAA/CiD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,SAM1BX,M","file":"static/js/main.a01d63fa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport $ from 'jquery';\nimport { Helmet } from 'react-helmet';\n\nconst TITLE = 'Random Quote Generator';\n\nclass QuoteBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quotes: [ {\"quote\":\"Life isn’t about getting and having, it’s about giving and being.\",\"author\":\"Kevin Kruse\"} ],\n      index: 0\n    };\n    this.getNewQuote = this.getNewQuote.bind(this);\n    this.getInitialQuote = this.getInitialQuote.bind(this);\n    // this.state.quotes.append({\"quote\":\"what\", \"author\":\"me\"});\n    fetch(\"https://gist.githubusercontent.com/nasrulhazim/54b659e43b1035215cd0ba1d4577ee80/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\").then(res => res.json()).then((out) => {\n      for(let i = 0; i < out[\"quotes\"].length; i++) {\n        this.state.quotes.push(out[\"quotes\"][i]);\n      }\n    });\n  }\n  componentDidMount() {\n    this.getInitialQuote();\n  }\n  getInitialQuote() {\n    setTimeout(() => {\n      this.setState(state => (\n        {index: Math.floor(Math.random() * state.quotes.length)}\n      ));\n    }, 1000);\n  }\n  getNewQuote() {\n    setTimeout(() => {\n      this.setState(state => (\n        {index: Math.floor(Math.random() * state.quotes.length)}\n      ));\n    }, 1000);\n  }\n  render() {\n    const quoteBoxStyle = {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: 30,\n      backgroundColor: 'white',\n      color: 'black',\n      width: '30%',\n      height: 'auto',\n      padding: '20px 20px 10px 20px',\n      borderRadius: 8\n    }\n    const quoteStyle = {\n      paddingLeft: 20,\n      paddingRight: 20,\n      flex: 8,\n      fontFamily: 'Playfair Display'\n    }\n    const buttonRowStyle = {\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-end',\n      flex: 1,\n      marginBottom: 10 \n    }\n\n    const quote = this.state.quotes[this.state.index];\n    const twitterIntent = \"https://twitter.com/intent/tweet?text=\" + \"\\\"\" + quote[\"quote\"] + \"\\\" - \" + quote[\"author\"] + \" via&url=https://kurtchoi.dev/random-quote-generator\";\n    return (\n      \n      <div id=\"quote-box\" style={quoteBoxStyle}>\n        <div id=\"quote\" style={quoteStyle}>\n          <h2 id=\"text\"><sup><i id=\"quotation\" class=\"fas fa-quote-left\"></i></sup>{quote[\"quote\"]}<sup><i id=\"quotation\" class=\"fas fa-quote-right\"></i></sup></h2>\n          <p id=\"author\">- {quote[\"author\"]}</p>\n        </div>\n        <div style={buttonRowStyle}>\n          <a href={twitterIntent} id=\"tweet-quote\">\n            <div class=\"tweet\">\n              <i class=\"fab fa-twitter\"></i>\n            </div>\n          </a>\n          <div id=\"new-quote\" onClick={this.getNewQuote}><i class=\"fas fa-sync\"></i>\n          </div>\n          { /* <button id=\"new-quote\" onClick={this.getNewQuote}><i class=\"fas fa-sync\"></i></button> */ }\n        </div>\n      </div>\n    )\n  }\n}\n$(document).ready(function() {\n  setTimeout(function() {\n    $(\"*\").animate({opacity: '1'}, 2000);\n  }, 1000); // wait 1s, then show initial quote\n  \n  $(\"#new-quote\").click(function() {\n    $(\"#quote\").animate({opacity: '0'}, 1000);\n    $(\"#quote\").animate({opacity: '1'}, 1000);\n  });\n});\n\n\n// const element = <QuoteBox />;\n\n// ReactDOM.render(element, document.getElementById('root'));\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <title>Random Quote Generator</title>\n      </Helmet>\n      <QuoteBox />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}